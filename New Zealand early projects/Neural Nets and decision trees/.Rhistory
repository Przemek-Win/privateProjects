scale.scale <- attr(b.s,"scaled:scale")
scale.center <- attr(b.s,"scaled:center")
do.nn <- function(hidden=2)
{
nn <- neuralnet(medv ~ crim+indus+nox+rm+tax+ptratio,data = b.s,hidden=hidden)
#plot(nn)
# Construct data for prediction
b.s.pred <- construct.data(b.s,4,100)
#
# ann example soln.
#
rm(list=ls())
un.scale.data <- function(data.set,attr.scale, attr.center)
{
data.set <- t(apply(data.set,1,function(x) x * attr.scale))
t(apply(data.set,1,function(x) x + attr.center))
}
construct.data <- function(d,vary.col,size)
{
medians <- apply(d,2,function(x) rep(median(x),size))
medians[,vary.col] <- seq(from=min(d[,vary.col]),
to=max(d[,vary.col]),length.out=size)
medians
}
#######################################################
# Simple example using ann and unscaling the response
#######################################################
library(neuralnet)
#
b <- read.csv("boston.csv",header=T)
b.s <- scale(b)
###########################
# Keep info about scaling
###########################
scale.scale <- attr(b.s,"scaled:scale")
scale.center <- attr(b.s,"scaled:center")
do.nn <- function(hidden=2)
{
nn <- neuralnet(medv ~ crim+indus+nox+rm+tax+ptratio,data = b.s,hidden=hidden)
#plot(nn)
# Construct data for prediction
b.s.pred <- construct.data(b.s,4,100)
b.s.pred
nn.s.pred <- compute(nn,b.s.pred[,-ncol(b.s)])
#
nn.pred <- un.scale.data(nn.s.pred$net.result,scale.scale[ncol(b.s)],scale.center[ncol(b.s)])
rm.scale.range <- seq(from=min(b.s[,4]),to=max(b.s[,4]), length.out=100)
rm.unscale <- un.scale.data(as.data.frame(rm.scale.range),scale.scale[4],scale.center[4])
plot(x=rm.unscale,
y = nn.pred,type='l',main=paste("Hidden:",hidden))
}
old.par <- par(mfrow=c(2,2))
for(h in c(1,3,5,7))
do.nn(hidden=h)
par(old.par)
#
# ann example soln.
#
rm(list=ls())
un.scale.data <- function(data.set,attr.scale, attr.center)
{
data.set <- t(apply(data.set,1,function(x) x * attr.scale))
t(apply(data.set,1,function(x) x + attr.center))
}
construct.data <- function(d,vary.col,size)
{
medians <- apply(d,2,function(x) rep(median(x),size))
medians[,vary.col] <- seq(from=min(d[,vary.col]),
to=max(d[,vary.col]),length.out=size)
medians
}
#######################################################
# Simple example using ann and unscaling the response
#######################################################
library(neuralnet)
#
b <- read.csv("boston.csv",header=T)
b.s <- scale(b)
###########################
# Keep info about scaling
###########################
scale.scale <- attr(b.s,"scaled:scale")
scale.center <- attr(b.s,"scaled:center")
do.nn <- function(hidden=2)
{
nn <- neuralnet(medv ~ crim+indus+nox+rm+tax+ptratio,data = b.s,hidden=hidden)
#plot(nn)
# Construct data for prediction
b.s.pred <- construct.data(b.s,4,100)
b.s.pred
nn.s.pred <- compute(nn,b.s.pred[,-ncol(b.s)])
#
nn.pred <- un.scale.data(nn.s.pred$net.result,scale.scale[ncol(b.s)],scale.center[ncol(b.s)])
rm.scale.range <- seq(from=min(b.s[,4]),to=max(b.s[,4]), length.out=100)
rm.unscale <- un.scale.data(as.data.frame(rm.scale.range),scale.scale[4],scale.center[4])
plot(x=rm.unscale,
y = nn.pred,type='l',main=paste("Hidden:",hidden))
}
old.par <- par(mfrow=c(2,2))
for(h in c(1,3,5,7))
do.nn(hidden=h)
par(old.par)
)
#
# ann example soln.
#
rm(list=ls())
un.scale.data <- function(data.set,attr.scale, attr.center)
{
data.set <- t(apply(data.set,1,function(x) x * attr.scale))
t(apply(data.set,1,function(x) x + attr.center))
}
construct.data <- function(d,vary.col,size)
{
medians <- apply(d,2,function(x) rep(median(x),size))
medians[,vary.col] <- seq(from=min(d[,vary.col]),
to=max(d[,vary.col]),length.out=size)
medians
}
#######################################################
# Simple example using ann and unscaling the response
#######################################################
library(neuralnet)
#
b <- read.csv("boston.csv",header=T)
b.s <- scale(b)
###########################
# Keep info about scaling
###########################
scale.scale <- attr(b.s,"scaled:scale")
scale.center <- attr(b.s,"scaled:center")
do.nn <- function(hidden=2)
{
nn <- neuralnet(medv ~ crim+indus+nox+rm+tax+ptratio,data = b.s,hidden=hidden)
#plot(nn)
# Construct data for prediction
b.s.pred <- construct.data(b.s,4,100)
b.s.pred
nn.s.pred <- compute(nn,b.s.pred[,-ncol(b.s)])
#
nn.pred <- un.scale.data(nn.s.pred$net.result,scale.scale[ncol(b.s)],scale.center[ncol(b.s)])
rm.scale.range <- seq(from=min(b.s[,4]),to=max(b.s[,4]), length.out=100)
rm.unscale <- un.scale.data(as.data.frame(rm.scale.range),scale.scale[4],scale.center[4])
plot(x=rm.unscale,
y = nn.pred,type='l',main=paste("Hidden:",hidden))
}
old.par <- par(mfrow=c(2,2))
for(h in c(1,3,5,7))
do.nn(hidden=h)
par(old.par)
b.s.pred
b.s.pred
b.s.pred
nn <- neuralnet(medv ~ crim+indus+nox+rm+tax+ptratio,data = b.s,hidden=hidden)
#plot(nn)
# Construct data for prediction
b.s.pred <- construct.data(b.s,4,100)
b.s.pred
nn.s.pred <- compute(nn,b.s.pred[,-ncol(b.s)])
#
nn.pred <- un.scale.data(nn.s.pred$net.result,scale.scale[ncol(b.s)],scale.center[ncol(b.s)])
rm.scale.range <- seq(from=min(b.s[,4]),to=max(b.s[,4]), length.out=100)
rm.unscale <- un.scale.data(as.data.frame(rm.scale.range),scale.scale[4],scale.center[4])
plot(x=rm.unscale,
y = nn.pred,type='l',main=paste("Hidden:",hidden))
b.s
b.s.pred
net.pred2
Boston2<-data.frame(Boston2)
orBoston <- Boston2[order(Boston2$medv),]
scBostzap<-orBoston
#Transforming other variables into their median apart from rm and medv
for(i in seq(from= 1, to= 3, by=1))
{
scBostzap[,i]<-rep(median(scBostzap[,i]),length(scBostzap[,i]))
}
for(i in seq(from= 5, to= 6, by=1))
{
scBostzap[,i]<-rep(median(scBostzap[,i]),length(scBostzap[,i]))
}
#RM variable
scBostzap[,4]<-seq(from=min(scBostzap[,4]), to=max(scBostzap[,4]), length.out=length(scBostzap[,4]))
#ANN
par(mfrow=c(1,1))
i=3
net.b3<-neuralnet(medv ~ ptratio+tax+rm+nox+indus+crim,data = scBostzap,hidden=i)
# Computation
net.pred2 <- compute(net.b3, scBostzap[,1:6])
setwd("C:/Users/Przemek/Documents/INFO324/assignment2")
library(neuralnet)
library(MASS)
Bostoni<-read.csv('Boston.csv', header=TRUE)
# The data.frame used later only for values on x axis in the plot
Boston3<-data.frame(Bostoni)
Boston3<-Boston3[order(Boston3$rm),]
#Scaling the data and recording scale and center.
Boston2<-scale(Bostoni)
scale.scale <- attr(Boston2,"scaled:scale")
scale.center <- attr(Boston2,"scaled:center")
#unscale function
un.scale.data <- function(data.set,attr.scale, attr.center)
{
data.set <- t(apply(data.set,1,function(x) x * attr.scale))
t(apply(data.set,1,function(x) x + attr.center))
}
#Ordering variables and transforming into data.frame
Boston2<-data.frame(Boston2)
orBoston <- Boston2[order(Boston2$medv),]
scBostzap<-orBoston
#Transforming other variables into their median apart from rm and medv
for(i in seq(from= 1, to= 3, by=1))
{
scBostzap[,i]<-rep(median(scBostzap[,i]),length(scBostzap[,i]))
}
for(i in seq(from= 5, to= 6, by=1))
{
scBostzap[,i]<-rep(median(scBostzap[,i]),length(scBostzap[,i]))
}
#RM variable
scBostzap[,4]<-seq(from=min(scBostzap[,4]), to=max(scBostzap[,4]), length.out=length(scBostzap[,4]))
#ANN
par(mfrow=c(1,1))
i=3
net.b3<-neuralnet(medv ~ ptratio+tax+rm+nox+indus+crim,data = scBostzap,hidden=i)
# Computation
net.pred2 <- compute(net.b3, scBostzap[,1:6])
net.pred2
net.pred2$neurons
net.pred2$neurons[[1]]
b.s.pred
nn.s.pred
nn.s.pred <- compute(nn,b.s.pred[,-ncol(b.s)])
rm(list=ls())
un.scale.data <- function(data.set,attr.scale, attr.center)
{
data.set <- t(apply(data.set,1,function(x) x * attr.scale))
t(apply(data.set,1,function(x) x + attr.center))
}
construct.data <- function(d,vary.col,size)
{
medians <- apply(d,2,function(x) rep(median(x),size))
medians[,vary.col] <- seq(from=min(d[,vary.col]),
to=max(d[,vary.col]),length.out=size)
medians
}
#######################################################
# Simple example using ann and unscaling the response
#######################################################
library(neuralnet)
#
b <- read.csv("boston.csv",header=T)
b.s <- scale(b)
###########################
# Keep info about scaling
###########################
scale.scale <- attr(b.s,"scaled:scale")
scale.center <- attr(b.s,"scaled:center")
do.nn <- function(hidden=2)
{
nn <- neuralnet(medv ~ crim+indus+nox+rm+tax+ptratio,data = b.s,hidden=hidden)
#plot(nn)
# Construct data for prediction
b.s.pred <- construct.data(b.s,4,100)
b.s.pred
nn.s.pred <- compute(nn,b.s.pred[,-ncol(b.s)])
#
nn.pred <- un.scale.data(nn.s.pred$net.result,scale.scale[ncol(b.s)],scale.center[ncol(b.s)])
rm.scale.range <- seq(from=min(b.s[,4]),to=max(b.s[,4]), length.out=100)
rm.unscale <- un.scale.data(as.data.frame(rm.scale.range),scale.scale[4],scale.center[4])
plot(x=rm.unscale,
y = nn.pred,type='l',main=paste("Hidden:",hidden))
}
old.par <- par(mfrow=c(2,2))
for(h in c(1,3,5,7))
do.nn(hidden=h)
nn.s.pred
net.b3
net.b3<-neuralnet(medv ~ ptratio+tax+rm+nox+indus+crim,data = scBostzap,hidden=i)
library(neuralnet)
library(MASS)
Bostoni<-read.csv('Boston.csv', header=TRUE)
# The data.frame used later only for values on x axis in the plot
Boston3<-data.frame(Bostoni)
Boston3<-Boston3[order(Boston3$rm),]
#Scaling the data and recording scale and center.
Boston2<-scale(Bostoni)
scale.scale <- attr(Boston2,"scaled:scale")
scale.center <- attr(Boston2,"scaled:center")
#unscale function
un.scale.data <- function(data.set,attr.scale, attr.center)
{
data.set <- t(apply(data.set,1,function(x) x * attr.scale))
t(apply(data.set,1,function(x) x + attr.center))
}
#Ordering variables and transforming into data.frame
Boston2<-data.frame(Boston2)
orBoston <- Boston2[order(Boston2$medv),]
scBostzap<-orBoston
#Transforming other variables into their median apart from rm and medv
for(i in seq(from= 1, to= 3, by=1))
{
scBostzap[,i]<-rep(median(scBostzap[,i]),length(scBostzap[,i]))
}
for(i in seq(from= 5, to= 6, by=1))
{
scBostzap[,i]<-rep(median(scBostzap[,i]),length(scBostzap[,i]))
}
#RM variable
scBostzap[,4]<-seq(from=min(scBostzap[,4]), to=max(scBostzap[,4]), length.out=length(scBostzap[,4]))
#ANN
par(mfrow=c(1,1))
i=3
net.b3<-neuralnet(medv ~ ptratio+tax+rm+nox+indus+crim,data = scBostzap,hidden=i)
# Computation
net.pred2 <- compute(net.b3, scBostzap[,1:6])
net.b3
scBostzap[,1:6]
#
# ann example soln.
#
rm(list=ls())
un.scale.data <- function(data.set,attr.scale, attr.center)
{
data.set <- t(apply(data.set,1,function(x) x * attr.scale))
t(apply(data.set,1,function(x) x + attr.center))
}
construct.data <- function(d,vary.col,size)
{
medians <- apply(d,2,function(x) rep(median(x),size))
medians[,vary.col] <- seq(from=min(d[,vary.col]),
to=max(d[,vary.col]),length.out=size)
medians
}
#######################################################
# Simple example using ann and unscaling the response
#######################################################
library(neuralnet)
#
b <- read.csv("boston.csv",header=T)
b.s <- scale(b)
###########################
# Keep info about scaling
###########################
scale.scale <- attr(b.s,"scaled:scale")
scale.center <- attr(b.s,"scaled:center")
hidden=2
nn <- neuralnet(medv ~ crim+indus+nox+rm+tax+ptratio,data = b.s,hidden=hidden)
#plot(nn)
# Construct data for prediction
b.s.pred <- construct.data(b.s,4,100)
b.s.pred
nn.s.pred <- compute(nn,b.s.pred[,-ncol(b.s)])
#
nn.pred <- un.scale.data(nn.s.pred$net.result,scale.scale[ncol(b.s)],scale.center[ncol(b.s)])
rm.scale.range <- seq(from=min(b.s[,4]),to=max(b.s[,4]), length.out=100)
rm.unscale <- un.scale.data(as.data.frame(rm.scale.range),scale.scale[4],scale.center[4])
plot(x=rm.unscale,
y = nn.pred,type='l',main=paste("Hidden:",hidden))
nn.s.pred
library(neuralnet)
library(MASS)
Bostoni<-read.csv('Boston.csv', header=TRUE)
# The data.frame used later only for values on x axis in the plot
Boston3<-data.frame(Bostoni)
Boston3<-Boston3[order(Boston3$rm),]
#Scaling the data and recording scale and center.
Boston2<-scale(Bostoni)
scale.scale <- attr(Boston2,"scaled:scale")
scale.center <- attr(Boston2,"scaled:center")
#unscale function
un.scale.data <- function(data.set,attr.scale, attr.center)
{
data.set <- t(apply(data.set,1,function(x) x * attr.scale))
t(apply(data.set,1,function(x) x + attr.center))
}
#Ordering variables and transforming into data.frame
Boston2<-data.frame(Boston2)
orBoston <- Boston2[order(Boston2$medv),]
scBostzap<-orBoston
#Transforming other variables into their median apart from rm and medv
for(i in seq(from= 1, to= 3, by=1))
{
scBostzap[,i]<-rep(median(scBostzap[,i]),length(scBostzap[,i]))
}
for(i in seq(from= 5, to= 6, by=1))
{
scBostzap[,i]<-rep(median(scBostzap[,i]),length(scBostzap[,i]))
}
#RM variable
scBostzap[,4]<-seq(from=min(scBostzap[,4]), to=max(scBostzap[,4]), length.out=length(scBostzap[,4]))
#ANN
par(mfrow=c(1,1))
i=3
net.b3<-neuralnet(medv ~ ptratio+tax+rm+nox+indus+crim,data = scBostzap,hidden=i)
# Computation
net.pred2 <- compute(net.b3, scBostzap[,1:6])
net.b3
net.pred2
nn.s.pred
nn
net.b3
scBostzap
head(scBostzap)
head(b.s)
net.b3<-neuralnet(medv ~ ptratio+tax+rm+nox+indus+crim,data = Boston2,hidden=i)
net.b3
net.b3
net.b3<-neuralnet(medv ~ ptratio+tax+rm+nox+indus+crim, data = Boston2, hidden=i)
neuralnet(medv ~ ptratio+tax+rm+nox+indus+crim, data = Boston2, hidden=i)
nn
net.pred2 <- compute(net.b3, scBostzap[,1:6])
head(net.pred2)
net.pred2$neurons[[1]]
head(net.pred2$neurons[[1]])
head(net.pred2$neurons[[2]])
head(nn.s.pred[[2]])
head(nn.s.pred$neurons[[2]])
net.pred.unscaled <- un.scale.data(net.pred2$net.result,scale.scale[7],scale.center[7])
net.pred.unscaled<-net.pred.unscaled[order(net.pred.unscaled)]
#Plot itself
plot(Boston3$rm,net.pred.unscaled, xlab="Number of rooms", ylab="Median price for the room predicted by ANN", main=paste("Response curve for " , i ,"hidden nodes") )
pairs(Bostoni)
?mtcars
net.b1<-neuralnet(medv ~ ptratio+tax+rm+nox+indus+crim,data = scBostzap)
net.b1
plot(net.b1)
net.b3<-neuralnet(medv ~ ptratio+tax+rm+nox+indus+crim,data = scBostzap,hidden=3)
net.b3
plot(net.b3)
net.b5<-neuralnet(medv ~ ptratio+tax+rm+nox+indus+crim,data = scBostzap,hidden=5)
net.b5
plot(net.b5)
scBostzap[,1:6]
b.s.pred[,-ncol(b.s)]
nn
net.b3
i=2
net.b3<-neuralnet(medv ~ ptratio+tax+rm+nox+indus+crim, data = Boston2, hidden=i)
net.b3
net.pred2 <- compute(net.b3, scBostzap[,1:6])
head(net.pred2$neurons[[2]])
head(nn.s.pred$neurons[[2]])
head(nn.s.pred[[2]])
head(net.pred2[[2]])
net.pred2 <- compute(net.b3, scBostzap[,1:6])
head(net.pred2[[2]])
nn.s.pred <- compute(nn,b.s.pred[,-ncol(b.s)])
head(nn.s.pred[[2]])
b.s.pred[,-ncol(b.s)]
scBostzap[,1:6]
for(i in seq(from= 1, to= 3, by=1))
{
scBostzap[,i]<-rep(median(scBostzap[,i]),length(100)
}
for(i in seq(from= 5, to= 6, by=1))
{
scBostzap[,i]<-rep(median(scBostzap[,i]),length(100))
}
#RM variable
scBostzap[,4]<-seq(from=min(scBostzap[,4]), to=max(scBostzap[,4]), length.out=length(100))
for(i in seq(from= 1, to= 3, by=1))
{
scBostzap[,i]<-rep(median(scBostzap[,i]),length(100))
}
for(i in seq(from= 5, to= 6, by=1))
{
scBostzap[,i]<-rep(median(scBostzap[,i]),length(100))
}
#RM variable
scBostzap[,4]<-seq(from=min(scBostzap[,4]), to=max(scBostzap[,4]), length.out=length(100))
#ANN
par(mfrow=c(1,1))
i=2
net.b3<-neuralnet(medv ~ ptratio+tax+rm+nox+indus+crim, data = Boston2, hidden=i)
net.b3
# Computation
net.pred2 <- compute(net.b3, scBostzap[,1:6])
head(net.pred2)
head(net.pred2[[2]])
scBostzap[,1:6]
scBostzap[,4]<-seq(from=min(scBostzap[,4]), to=max(scBostzap[,4]), length.out=100)
library(neuralnet)
library(MASS)
Bostoni<-read.csv('Boston.csv', header=TRUE)
# The data.frame used later only for values on x axis in the plot
Boston3<-data.frame(Bostoni)
Boston3<-Boston3[order(Boston3$rm),]
#Scaling the data and recording scale and center.
Boston2<-scale(Bostoni)
scale.scale <- attr(Boston2,"scaled:scale")
scale.center <- attr(Boston2,"scaled:center")
#unscale function
un.scale.data <- function(data.set,attr.scale, attr.center)
{
data.set <- t(apply(data.set,1,function(x) x * attr.scale))
t(apply(data.set,1,function(x) x + attr.center))
}
#Ordering variables and transforming into data.frame
Boston2<-data.frame(Boston2)
orBoston <- Boston2[order(Boston2$medv),]
scBostzap<-orBoston
#Transforming other variables into their median apart from rm and medv
for(i in seq(from= 1, to= 3, by=1))
{
scBostzap[,i]<-rep(median(scBostzap[,i]),length(100))
}
for(i in seq(from= 5, to= 6, by=1))
{
scBostzap[,i]<-rep(median(scBostzap[,i]),length(100))
}
#RM variable
scBostzap[,4]<-seq(from=min(scBostzap[,4]), to=max(scBostzap[,4]), length.out=100)
